/*
 * Copyright (c) 2017 Intel Corporation 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.icecp.node.utils;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.lang.reflect.Array;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Test;

import com.intel.icecp.node.management.JarUtils;

/**
 */
public class JarUtilsTest {

    private static final Logger LOGGER = LogManager.getLogger();

    @Test
    public void testGetClassByteCode() throws IOException {
        byte[] byteCode = JarUtils.getClassByteCode(JarUtilsTest.class);

        String byteCodeAsString = new String(byteCode);
        LOGGER.debug("Generated byte code: {}", byteCodeAsString);

        String classNameAsByteCode = 'L' + JarUtilsTest.class.getCanonicalName().replace('.', '/') + ';'; // see http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.2
        assertTrue(new String(byteCode).contains(classNameAsByteCode));
    }

    @Test
    public void testGetClassByteCodeOfInnerClass() throws IOException {
        byte[] byteCode = JarUtils.getClassByteCode(X.class);

        String byteCodeAsString = new String(byteCode);
        LOGGER.debug("Generated byte code: {}", byteCodeAsString);

        String classNameAsByteCode = 'L' + JarUtilsTest.class.getCanonicalName().replace('.', '/') + '$' + X.class.getSimpleName(); // see http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.2
        assertTrue(byteCodeAsString.contains(classNameAsByteCode));
    }

    @Test
    public void testBuildJar() throws IOException {
        byte[] bytes = JarUtils.buildJar(JarUtilsTest.class, JarUtils.class, IOException.class);

        String jarBytesAsString = new String(bytes);
        LOGGER.debug("Generated byte code: {}", jarBytesAsString);

        assertTrue(jarBytesAsString.contains(JarUtilsTest.class.getSimpleName()));
        assertTrue(jarBytesAsString.contains(JarUtils.class.getSimpleName()));
        assertTrue(jarBytesAsString.contains(IOException.class.getSimpleName()));
    }

    @Test
    public void testBuildJarClassesWithNullEntriesDoesNotThrowNullPointerException() throws IOException {
        Class<String>[] classArray = (Class<String>[]) Array.newInstance(Class.class, 10);
        Class<String> clazz = String.class;
        classArray[0] = clazz;
        JarUtils.buildJar(classArray);
        // no assert needed; if we get through this, we haven't thrown an NPE
    }

    private class X {
        // do nothing
    }
}
