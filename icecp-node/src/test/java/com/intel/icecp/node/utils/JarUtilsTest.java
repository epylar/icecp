/*
 * ******************************************************************************
 *
 * INTEL CONFIDENTIAL
 *
 * Copyright 2013 - 2016 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related to
 * the source code ("Material") are owned by Intel Corporation or its suppliers
 * or licensors. Title to the Material remains with Intel Corporation or its
 * suppliers and licensors. The Material contains trade secrets and proprietary
 * and confidential information of Intel or its suppliers and licensors. The
 * Material is protected by worldwide copyright and trade secret laws and treaty
 * provisions. No part of the Material may be used, copied, reproduced,
 * modified, published, uploaded, posted, transmitted, distributed, or disclosed
 * in any way without Intel's prior express written permission.
 *
 * No license under any patent, copyright, trade secret or other intellectual
 * property right is granted to or conferred upon you by disclosure or delivery
 * of the Materials, either expressly, by implication, inducement, estoppel or
 * otherwise. Any license under such intellectual property rights must be
 * express and approved by Intel in writing.
 *
 * Unless otherwise agreed by Intel in writing, you may not remove or alter this
 * notice or any other notice embedded in Materials by Intel or Intel's
 * suppliers or licensors in any way.
 *
 * ******************************************************************************
 */

package com.intel.icecp.node.utils;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.lang.reflect.Array;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Test;

import com.intel.icecp.node.management.JarUtils;

/**
 */
public class JarUtilsTest {

    private static final Logger LOGGER = LogManager.getLogger();

    @Test
    public void testGetClassByteCode() throws IOException {
        byte[] byteCode = JarUtils.getClassByteCode(JarUtilsTest.class);

        String byteCodeAsString = new String(byteCode);
        LOGGER.debug("Generated byte code: {}", byteCodeAsString);

        String classNameAsByteCode = 'L' + JarUtilsTest.class.getCanonicalName().replace('.', '/') + ';'; // see http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.2
        assertTrue(new String(byteCode).contains(classNameAsByteCode));
    }

    @Test
    public void testGetClassByteCodeOfInnerClass() throws IOException {
        byte[] byteCode = JarUtils.getClassByteCode(X.class);

        String byteCodeAsString = new String(byteCode);
        LOGGER.debug("Generated byte code: {}", byteCodeAsString);

        String classNameAsByteCode = 'L' + JarUtilsTest.class.getCanonicalName().replace('.', '/') + '$' + X.class.getSimpleName(); // see http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.2
        assertTrue(byteCodeAsString.contains(classNameAsByteCode));
    }

    @Test
    public void testBuildJar() throws IOException {
        byte[] bytes = JarUtils.buildJar(JarUtilsTest.class, JarUtils.class, IOException.class);

        String jarBytesAsString = new String(bytes);
        LOGGER.debug("Generated byte code: {}", jarBytesAsString);

        assertTrue(jarBytesAsString.contains(JarUtilsTest.class.getSimpleName()));
        assertTrue(jarBytesAsString.contains(JarUtils.class.getSimpleName()));
        assertTrue(jarBytesAsString.contains(IOException.class.getSimpleName()));
    }

    @Test
    public void testBuildJarClassesWithNullEntriesDoesNotThrowNullPointerException() throws IOException {
        Class<String>[] classArray = (Class<String>[]) Array.newInstance(Class.class, 10);
        Class<String> clazz = String.class;
        classArray[0] = clazz;
        JarUtils.buildJar(classArray);
        // no assert needed; if we get through this, we haven't thrown an NPE
    }

    private class X {
        // do nothing
    }
}
